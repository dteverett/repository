#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Logger
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ClaimStakerDEV")]
	public partial class DataClassDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTestErrorLog(TestErrorLog instance);
    partial void UpdateTestErrorLog(TestErrorLog instance);
    partial void DeleteTestErrorLog(TestErrorLog instance);
    partial void InsertTestLogs_T(TestLogs_T instance);
    partial void UpdateTestLogs_T(TestLogs_T instance);
    partial void DeleteTestLogs_T(TestLogs_T instance);
    #endregion
		
		public DataClassDataContext() : 
				base(global::Logger.Properties.Settings.Default.ClaimStakerDEVConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TestErrorLog> TestErrorLogs
		{
			get
			{
				return this.GetTable<TestErrorLog>();
			}
		}
		
		public System.Data.Linq.Table<TestLogs_T> TestLogs_Ts
		{
			get
			{
				return this.GetTable<TestLogs_T>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestErrorLog")]
	public partial class TestErrorLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogID;
		
		private System.Nullable<System.DateTime> _DateCreated_DT;
		
		private string _Message_VC;
		
		private string _ExceptionThrower_VC;
		
		private string _LogLevel_VC;
		
		private System.Nullable<long> _TestLog_ID;
		
		private EntityRef<TestLogs_T> _TestLogs_T;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIDChanging(int value);
    partial void OnLogIDChanged();
    partial void OnDateCreated_DTChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreated_DTChanged();
    partial void OnMessage_VCChanging(string value);
    partial void OnMessage_VCChanged();
    partial void OnExceptionThrower_VCChanging(string value);
    partial void OnExceptionThrower_VCChanged();
    partial void OnLogLevel_VCChanging(string value);
    partial void OnLogLevel_VCChanged();
    partial void OnTestLog_IDChanging(System.Nullable<long> value);
    partial void OnTestLog_IDChanged();
    #endregion
		
		public TestErrorLog()
		{
			this._TestLogs_T = default(EntityRef<TestLogs_T>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LogID
		{
			get
			{
				return this._LogID;
			}
			set
			{
				if ((this._LogID != value))
				{
					this.OnLogIDChanging(value);
					this.SendPropertyChanging();
					this._LogID = value;
					this.SendPropertyChanged("LogID");
					this.OnLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated_DT", DbType="Date")]
		public System.Nullable<System.DateTime> DateCreated_DT
		{
			get
			{
				return this._DateCreated_DT;
			}
			set
			{
				if ((this._DateCreated_DT != value))
				{
					this.OnDateCreated_DTChanging(value);
					this.SendPropertyChanging();
					this._DateCreated_DT = value;
					this.SendPropertyChanged("DateCreated_DT");
					this.OnDateCreated_DTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message_VC", DbType="VarChar(MAX)")]
		public string Message_VC
		{
			get
			{
				return this._Message_VC;
			}
			set
			{
				if ((this._Message_VC != value))
				{
					this.OnMessage_VCChanging(value);
					this.SendPropertyChanging();
					this._Message_VC = value;
					this.SendPropertyChanged("Message_VC");
					this.OnMessage_VCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExceptionThrower_VC", DbType="VarChar(MAX)")]
		public string ExceptionThrower_VC
		{
			get
			{
				return this._ExceptionThrower_VC;
			}
			set
			{
				if ((this._ExceptionThrower_VC != value))
				{
					this.OnExceptionThrower_VCChanging(value);
					this.SendPropertyChanging();
					this._ExceptionThrower_VC = value;
					this.SendPropertyChanged("ExceptionThrower_VC");
					this.OnExceptionThrower_VCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogLevel_VC", DbType="VarChar(50)")]
		public string LogLevel_VC
		{
			get
			{
				return this._LogLevel_VC;
			}
			set
			{
				if ((this._LogLevel_VC != value))
				{
					this.OnLogLevel_VCChanging(value);
					this.SendPropertyChanging();
					this._LogLevel_VC = value;
					this.SendPropertyChanged("LogLevel_VC");
					this.OnLogLevel_VCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestLog_ID", DbType="BigInt")]
		public System.Nullable<long> TestLog_ID
		{
			get
			{
				return this._TestLog_ID;
			}
			set
			{
				if ((this._TestLog_ID != value))
				{
					if (this._TestLogs_T.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestLog_IDChanging(value);
					this.SendPropertyChanging();
					this._TestLog_ID = value;
					this.SendPropertyChanged("TestLog_ID");
					this.OnTestLog_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestLogs_T_TestErrorLog", Storage="_TestLogs_T", ThisKey="TestLog_ID", OtherKey="TestLog_ID", IsForeignKey=true)]
		public TestLogs_T TestLogs_T
		{
			get
			{
				return this._TestLogs_T.Entity;
			}
			set
			{
				TestLogs_T previousValue = this._TestLogs_T.Entity;
				if (((previousValue != value) 
							|| (this._TestLogs_T.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestLogs_T.Entity = null;
						previousValue.TestErrorLogs.Remove(this);
					}
					this._TestLogs_T.Entity = value;
					if ((value != null))
					{
						value.TestErrorLogs.Add(this);
						this._TestLog_ID = value.TestLog_ID;
					}
					else
					{
						this._TestLog_ID = default(Nullable<long>);
					}
					this.SendPropertyChanged("TestLogs_T");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestLogs_T")]
	public partial class TestLogs_T : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _TestLog_ID;
		
		private string _TestExecuted_VC;
		
		private System.Nullable<System.DateTime> _DateExecuted_DT;
		
		private string _Notes_VC;
		
		private System.Nullable<bool> _PassFail;
		
		private EntitySet<TestErrorLog> _TestErrorLogs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestLog_IDChanging(long value);
    partial void OnTestLog_IDChanged();
    partial void OnTestExecuted_VCChanging(string value);
    partial void OnTestExecuted_VCChanged();
    partial void OnDateExecuted_DTChanging(System.Nullable<System.DateTime> value);
    partial void OnDateExecuted_DTChanged();
    partial void OnNotes_VCChanging(string value);
    partial void OnNotes_VCChanged();
    partial void OnPassFailChanging(System.Nullable<bool> value);
    partial void OnPassFailChanged();
    #endregion
		
		public TestLogs_T()
		{
			this._TestErrorLogs = new EntitySet<TestErrorLog>(new Action<TestErrorLog>(this.attach_TestErrorLogs), new Action<TestErrorLog>(this.detach_TestErrorLogs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestLog_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long TestLog_ID
		{
			get
			{
				return this._TestLog_ID;
			}
			set
			{
				if ((this._TestLog_ID != value))
				{
					this.OnTestLog_IDChanging(value);
					this.SendPropertyChanging();
					this._TestLog_ID = value;
					this.SendPropertyChanged("TestLog_ID");
					this.OnTestLog_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestExecuted_VC", DbType="VarChar(MAX)")]
		public string TestExecuted_VC
		{
			get
			{
				return this._TestExecuted_VC;
			}
			set
			{
				if ((this._TestExecuted_VC != value))
				{
					this.OnTestExecuted_VCChanging(value);
					this.SendPropertyChanging();
					this._TestExecuted_VC = value;
					this.SendPropertyChanged("TestExecuted_VC");
					this.OnTestExecuted_VCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateExecuted_DT", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateExecuted_DT
		{
			get
			{
				return this._DateExecuted_DT;
			}
			set
			{
				if ((this._DateExecuted_DT != value))
				{
					this.OnDateExecuted_DTChanging(value);
					this.SendPropertyChanging();
					this._DateExecuted_DT = value;
					this.SendPropertyChanged("DateExecuted_DT");
					this.OnDateExecuted_DTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes_VC", DbType="VarChar(MAX)")]
		public string Notes_VC
		{
			get
			{
				return this._Notes_VC;
			}
			set
			{
				if ((this._Notes_VC != value))
				{
					this.OnNotes_VCChanging(value);
					this.SendPropertyChanging();
					this._Notes_VC = value;
					this.SendPropertyChanged("Notes_VC");
					this.OnNotes_VCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassFail", DbType="Bit")]
		public System.Nullable<bool> PassFail
		{
			get
			{
				return this._PassFail;
			}
			set
			{
				if ((this._PassFail != value))
				{
					this.OnPassFailChanging(value);
					this.SendPropertyChanging();
					this._PassFail = value;
					this.SendPropertyChanged("PassFail");
					this.OnPassFailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestLogs_T_TestErrorLog", Storage="_TestErrorLogs", ThisKey="TestLog_ID", OtherKey="TestLog_ID")]
		public EntitySet<TestErrorLog> TestErrorLogs
		{
			get
			{
				return this._TestErrorLogs;
			}
			set
			{
				this._TestErrorLogs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestErrorLogs(TestErrorLog entity)
		{
			this.SendPropertyChanging();
			entity.TestLogs_T = this;
		}
		
		private void detach_TestErrorLogs(TestErrorLog entity)
		{
			this.SendPropertyChanging();
			entity.TestLogs_T = null;
		}
	}
}
#pragma warning restore 1591
