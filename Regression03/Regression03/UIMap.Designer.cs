// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Regression03
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// ActivateValidatorsApexWatcher
        /// </summary>
        public void ActivateValidatorsApexWatcher()
        {
            #region Variable Declarations
            WinButton uI5010Validator = this.UIApexWatcherWindow.UIStoppedWindow2.UI5010Validator;
            WinButton uIImportMonitor = this.UIApexWatcherWindow.UIStoppedWindow.UIImportMonitor;
            WinButton uIValidator = this.UIApexWatcherWindow.UIStoppedWindow1.UIValidator;
            #endregion

            // Click 'Stopped' button
            Mouse.Click(uI5010Validator, new Point(54, 25));

            // Click 'Stopped' button
            Mouse.Click(uIImportMonitor, new Point(28, 7));

            // Click 'Stopped' button
            Mouse.Click(uIValidator, new Point(23, 15));
        }
        
        /// <summary>
        /// AssertAutoImportOpened - Use 'AssertAutoImportOpenedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertAutoImportOpened()
        {
            #region Variable Declarations
            WinClient uIAutoImport5010Client = this.UIAutoImport5010Window.UIAutoImport5010Client;
            #endregion

            // Verify that the 'ControlName' property of 'AutoImport5010' client equals 'AutoImportForm'
            Assert.AreEqual(this.AssertAutoImportOpenedExpectedValues.UIAutoImport5010ClientControlName, uIAutoImport5010Client.ControlName);
        }
        
        /// <summary>
        /// BeginCloseAutoImport
        /// </summary>
        public void BeginCloseAutoImport()
        {
            #region Variable Declarations
            WinButton autoImportCloseButton = this.UIAutoImport5010Window.UIAutoImport5010TitleBar.AutoImportCloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(autoImportCloseButton, new Point(21, 7));
        }
        
        /// <summary>
        /// LogInClaimStakerPlus - Use 'LogInClaimStakerPlusParams' to pass parameters into this method.
        /// </summary>
        public void LogInClaimStakerPlus()
        {
            #region Variable Declarations
            WinEdit uITxtLoginNameEdit = this.UIClaimStakerSQLServerWindow.UITxtLoginNameWindow.UITxtLoginNameEdit;
            WinEdit uITxtPasswordEdit = this.UIClaimStakerSQLServerWindow.UITxtPasswordWindow.UITxtPasswordEdit;
            #endregion

            // Type 'dariantest' in 'txtLoginName' text box
            uITxtLoginNameEdit.Text = this.LogInClaimStakerPlusParams.UITxtLoginNameEditText;

            // Type '{Tab}' in 'txtLoginName' text box
            Keyboard.SendKeys(uITxtLoginNameEdit, this.LogInClaimStakerPlusParams.UITxtLoginNameEditSendKeys, ModifierKeys.None);

            // Type '********' in 'txtPassword' text box
            Keyboard.SendKeys(uITxtPasswordEdit, this.LogInClaimStakerPlusParams.UITxtPasswordEditSendKeys, true);
        }
        
        /// <summary>
        /// OneTouch - Use 'OneTouchParams' to pass parameters into this method.
        /// </summary>
        public void OneTouch()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIClaimStakerPlusValidWindow.UIClaimStakerPlusValidTitleBar.UICloseButton;
            WinButton uIBtnConfigureButton = this.UIApexOneTouchWindow.UIBtnConfigureWindow.UIBtnConfigureButton;
            WinClient uIPnlTabStatementsClient = this.UIApexOneTouchConfigurWindow.UIPnlTabStatementsWindow.UIPnlTabStatementsClient;
            WinClient uIPnlTabAccountsClient = this.UIApexOneTouchConfigurWindow.UIPnlTabAccountsWindow.UIPnlTabAccountsClient;
            WinClient uIPnlTabAdvancedClient = this.UIApexOneTouchConfigurWindow.UIPnlTabAdvancedWindow.UIPnlTabAdvancedClient;
            WinClient uIPnlTabClaimsClient = this.UIApexOneTouchConfigurWindow.UIPnlTabClaimsWindow.UIPnlTabClaimsClient;
            WinButton uIBtnSaveButton = this.UIApexOneTouchConfigurWindow.UIBtnSaveWindow.UIBtnSaveButton;
            WinButton uIBtnSendClaimsButton = this.UIApexOneTouchWindow.UIBtnSendClaimsWindow.UIBtnSendClaimsButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(19, 6));

            // Launch 'C:\OneTouch\OneTouch.exe'
            ApplicationUnderTest uIApexOneTouchWindow = ApplicationUnderTest.Launch(this.OneTouchParams.UIApexOneTouchWindowExePath, this.OneTouchParams.UIApexOneTouchWindowAlternateExePath);

            // Click 'btnConfigure' button
            Mouse.Click(uIBtnConfigureButton, new Point(8, 13));

            // Click 'pnlTabStatements' client
            Mouse.Click(uIPnlTabStatementsClient, new Point(71, 12));

            // Click 'pnlTabAccounts' client
            Mouse.Click(uIPnlTabAccountsClient, new Point(39, 10));

            // Click 'pnlTabAdvanced' client
            Mouse.Click(uIPnlTabAdvancedClient, new Point(55, 4));

            // Click 'pnlTabClaims' client
            Mouse.Click(uIPnlTabClaimsClient, new Point(89, 4));

            // Click 'btnSave' button
            Mouse.Click(uIBtnSaveButton, new Point(77, 8));

            // Click 'btnSendClaims' button
            Mouse.Click(uIBtnSendClaimsButton, new Point(114, 46));
        }
        
        /// <summary>
        /// OutputClaim - Use 'OutputClaimParams' to pass parameters into this method.
        /// </summary>
        public void OutputClaim()
        {
            #region Variable Declarations
            WinMenuItem uICreateMenuItem = this.UIClaimStakerPlusWindow.UIClaimStakerMainMenuBar.UIOutputMenuItem.UICreateMenuItem;
            WinRadioButton uIClaimIDRadioButton = this.UIClaimStakerPlusWindow.UICreateOutputWindow.UIClaimIDWindow.UIClaimIDRadioButton;
            WinRadioButton uITestRadioButton = this.UIClaimStakerPlusWindow.UICreateOutputWindow.UITestWindow.UITestRadioButton;
            WinEdit uITxtClaimIDEdit = this.UIClaimStakerPlusWindow.UICreateOutputWindow.UITxtClaimIDWindow.UITxtClaimIDEdit;
            WinButton uICreateButton = this.UIClaimStakerPlusWindow.UICreateOutputWindow.UICreateWindow.UICreateButton;
            WinButton uIOKProblemConnectingButton = this.UIOKWindow.UIOKProblemConnectingButton;
            #endregion

            // The recording for the application under test '\\apexdata\F_Drive_Test\ClaimStakerPlus\ClaimStakerUI.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Output' -> 'Create' menu item
            Mouse.Click(uICreateMenuItem, new Point(37, 13));

            // Select 'Claim ID:' radio button
            uIClaimIDRadioButton.Selected = this.OutputClaimParams.UIClaimIDRadioButtonSelected;

            // Select 'Test' radio button
            uITestRadioButton.Selected = this.OutputClaimParams.UITestRadioButtonSelected;

            // Type '4836547' in 'txtClaimID' text box
            uITxtClaimIDEdit.Text = this.OutputClaimParams.UITxtClaimIDEditText;

            // Click 'Create' button
            Mouse.Click(uICreateButton, new Point(58, 2));

            // Click 'OK' button
            Mouse.Click(uIOKProblemConnectingButton, new Point(49, 16));
        }
        
        /// <summary>
        /// StartClaimStakerPlus - Use 'StartClaimStakerPlusParams' to pass parameters into this method.
        /// </summary>
        public void StartClaimStakerPlus()
        {

            // Launch '\\apexdata\F_Drive_Test\ClaimStakerPlus\RunClaimStakerUI.exe'
            ApplicationUnderTest runClaimStakerUIApplication = ApplicationUnderTest.Launch(this.StartClaimStakerPlusParams.ExePath, this.StartClaimStakerPlusParams.AlternateExePath);
        }
        
        /// <summary>
        /// StartOneTouchOnly
        /// </summary>
        public void StartOneTouchOnly()
        {
            #region Variable Declarations
            WinListItem uIApexOneTouchListItem = this.UIProgramManagerWindow.UIDesktopList.UIApexOneTouchListItem;
            #endregion

            // Double-Click 'Apex OneTouch' list item
            Mouse.DoubleClick(uIApexOneTouchListItem, new Point(40, 23));
        }
        
        #region Properties
        public virtual AssertAutoImportOpenedExpectedValues AssertAutoImportOpenedExpectedValues
        {
            get
            {
                if ((this.mAssertAutoImportOpenedExpectedValues == null))
                {
                    this.mAssertAutoImportOpenedExpectedValues = new AssertAutoImportOpenedExpectedValues();
                }
                return this.mAssertAutoImportOpenedExpectedValues;
            }
        }
        
        public virtual LogInClaimStakerPlusParams LogInClaimStakerPlusParams
        {
            get
            {
                if ((this.mLogInClaimStakerPlusParams == null))
                {
                    this.mLogInClaimStakerPlusParams = new LogInClaimStakerPlusParams();
                }
                return this.mLogInClaimStakerPlusParams;
            }
        }
        
        public virtual OneTouchParams OneTouchParams
        {
            get
            {
                if ((this.mOneTouchParams == null))
                {
                    this.mOneTouchParams = new OneTouchParams();
                }
                return this.mOneTouchParams;
            }
        }
        
        public virtual OutputClaimParams OutputClaimParams
        {
            get
            {
                if ((this.mOutputClaimParams == null))
                {
                    this.mOutputClaimParams = new OutputClaimParams();
                }
                return this.mOutputClaimParams;
            }
        }
        
        public virtual StartClaimStakerPlusParams StartClaimStakerPlusParams
        {
            get
            {
                if ((this.mStartClaimStakerPlusParams == null))
                {
                    this.mStartClaimStakerPlusParams = new StartClaimStakerPlusParams();
                }
                return this.mStartClaimStakerPlusParams;
            }
        }
        
        public UIAutoImport5010Window UIAutoImport5010Window
        {
            get
            {
                if ((this.mUIAutoImport5010Window == null))
                {
                    this.mUIAutoImport5010Window = new UIAutoImport5010Window();
                }
                return this.mUIAutoImport5010Window;
            }
        }
        
        public UIApexWatcherWindow UIApexWatcherWindow
        {
            get
            {
                if ((this.mUIApexWatcherWindow == null))
                {
                    this.mUIApexWatcherWindow = new UIApexWatcherWindow();
                }
                return this.mUIApexWatcherWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIClaimStakerSQLServerWindow UIClaimStakerSQLServerWindow
        {
            get
            {
                if ((this.mUIClaimStakerSQLServerWindow == null))
                {
                    this.mUIClaimStakerSQLServerWindow = new UIClaimStakerSQLServerWindow();
                }
                return this.mUIClaimStakerSQLServerWindow;
            }
        }
        
        public UIClaimStakerPlusWindow UIClaimStakerPlusWindow
        {
            get
            {
                if ((this.mUIClaimStakerPlusWindow == null))
                {
                    this.mUIClaimStakerPlusWindow = new UIClaimStakerPlusWindow();
                }
                return this.mUIClaimStakerPlusWindow;
            }
        }
        
        public UIClaimStakerAUTOIMPORWindow UIClaimStakerAUTOIMPORWindow
        {
            get
            {
                if ((this.mUIClaimStakerAUTOIMPORWindow == null))
                {
                    this.mUIClaimStakerAUTOIMPORWindow = new UIClaimStakerAUTOIMPORWindow();
                }
                return this.mUIClaimStakerAUTOIMPORWindow;
            }
        }
        
        public UIWarningWindow UIWarningWindow
        {
            get
            {
                if ((this.mUIWarningWindow == null))
                {
                    this.mUIWarningWindow = new UIWarningWindow();
                }
                return this.mUIWarningWindow;
            }
        }
        
        public UIConfirmCloseWindow UIConfirmCloseWindow
        {
            get
            {
                if ((this.mUIConfirmCloseWindow == null))
                {
                    this.mUIConfirmCloseWindow = new UIConfirmCloseWindow();
                }
                return this.mUIConfirmCloseWindow;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIClaimStakerPlusValidWindow UIClaimStakerPlusValidWindow
        {
            get
            {
                if ((this.mUIClaimStakerPlusValidWindow == null))
                {
                    this.mUIClaimStakerPlusValidWindow = new UIClaimStakerPlusValidWindow();
                }
                return this.mUIClaimStakerPlusValidWindow;
            }
        }
        
        public UIApexOneTouchWindow UIApexOneTouchWindow
        {
            get
            {
                if ((this.mUIApexOneTouchWindow == null))
                {
                    this.mUIApexOneTouchWindow = new UIApexOneTouchWindow();
                }
                return this.mUIApexOneTouchWindow;
            }
        }
        
        public UIApexOneTouchConfigurWindow UIApexOneTouchConfigurWindow
        {
            get
            {
                if ((this.mUIApexOneTouchConfigurWindow == null))
                {
                    this.mUIApexOneTouchConfigurWindow = new UIApexOneTouchConfigurWindow();
                }
                return this.mUIApexOneTouchConfigurWindow;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertAutoImportOpenedExpectedValues mAssertAutoImportOpenedExpectedValues;
        
        private LogInClaimStakerPlusParams mLogInClaimStakerPlusParams;
        
        private OneTouchParams mOneTouchParams;
        
        private OutputClaimParams mOutputClaimParams;
        
        private StartClaimStakerPlusParams mStartClaimStakerPlusParams;
        
        private UIAutoImport5010Window mUIAutoImport5010Window;
        
        private UIApexWatcherWindow mUIApexWatcherWindow;
        
        private UIOKWindow mUIOKWindow;
        
        private UIClaimStakerSQLServerWindow mUIClaimStakerSQLServerWindow;
        
        private UIClaimStakerPlusWindow mUIClaimStakerPlusWindow;
        
        private UIClaimStakerAUTOIMPORWindow mUIClaimStakerAUTOIMPORWindow;
        
        private UIWarningWindow mUIWarningWindow;
        
        private UIConfirmCloseWindow mUIConfirmCloseWindow;
        
        private UIItemWindow2 mUIItemWindow;
        
        private UIClaimStakerPlusValidWindow mUIClaimStakerPlusValidWindow;
        
        private UIApexOneTouchWindow mUIApexOneTouchWindow;
        
        private UIApexOneTouchConfigurWindow mUIApexOneTouchConfigurWindow;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAutoImportOpened'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertAutoImportOpenedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlName' property of 'AutoImport5010' client equals 'AutoImportForm'
        /// </summary>
        public string UIAutoImport5010ClientControlName = "AutoImportForm";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LogInClaimStakerPlus'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class LogInClaimStakerPlusParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'dariantest' in 'txtLoginName' text box
        /// </summary>
        public string UITxtLoginNameEditText = "dariantest";
        
        /// <summary>
        /// Type '{Tab}' in 'txtLoginName' text box
        /// </summary>
        public string UITxtLoginNameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'txtPassword' text box
        /// </summary>
        public string UITxtPasswordEditSendKeys = "MBj3VdGD7CAtbof+nqP9rh/JUzphJKiQytN7Rmi+kuY=";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OneTouch'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class OneTouchParams
    {
        
        #region Fields
        /// <summary>
        /// Launch 'C:\OneTouch\OneTouch.exe'
        /// </summary>
        public string UIApexOneTouchWindowExePath = "C:\\OneTouch\\OneTouch.exe";
        
        /// <summary>
        /// Launch 'C:\OneTouch\OneTouch.exe'
        /// </summary>
        public string UIApexOneTouchWindowAlternateExePath = "C:\\OneTouch\\OneTouch.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OutputClaim'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class OutputClaimParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Claim ID:' radio button
        /// </summary>
        public bool UIClaimIDRadioButtonSelected = true;
        
        /// <summary>
        /// Select 'Test' radio button
        /// </summary>
        public bool UITestRadioButtonSelected = true;
        
        /// <summary>
        /// Type '4836547' in 'txtClaimID' text box
        /// </summary>
        public string UITxtClaimIDEditText = "4836547";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'StartClaimStakerPlus'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class StartClaimStakerPlusParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '\\apexdata\F_Drive_Test\ClaimStakerPlus\RunClaimStakerUI.exe'
        /// </summary>
        public string ExePath = "\\\\apexdata\\F_Drive_Test\\ClaimStakerPlus\\RunClaimStakerUI.exe";
        
        /// <summary>
        /// Launch '\\apexdata\F_Drive_Test\ClaimStakerPlus\RunClaimStakerUI.exe'
        /// </summary>
        public string AlternateExePath = "\\\\apexdata\\F_Drive_Test\\ClaimStakerPlus\\RunClaimStakerUI.exe";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIAutoImport5010Window : WinWindow
    {
        
        public UIAutoImport5010Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "AutoImport5010";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("AutoImport5010");
            #endregion
        }
        
        #region Properties
        public WinClient UIAutoImport5010Client
        {
            get
            {
                if ((this.mUIAutoImport5010Client == null))
                {
                    this.mUIAutoImport5010Client = new WinClient(this);
                    #region Search Criteria
                    this.mUIAutoImport5010Client.SearchProperties[WinControl.PropertyNames.Name] = "AutoImport5010";
                    this.mUIAutoImport5010Client.WindowTitles.Add("AutoImport5010");
                    #endregion
                }
                return this.mUIAutoImport5010Client;
            }
        }
        
        public UIStartWindow UIStartWindow
        {
            get
            {
                if ((this.mUIStartWindow == null))
                {
                    this.mUIStartWindow = new UIStartWindow(this);
                }
                return this.mUIStartWindow;
            }
        }
        
        public UIAutoImport5010TitleBar UIAutoImport5010TitleBar
        {
            get
            {
                if ((this.mUIAutoImport5010TitleBar == null))
                {
                    this.mUIAutoImport5010TitleBar = new UIAutoImport5010TitleBar(this);
                }
                return this.mUIAutoImport5010TitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIAutoImport5010Client;
        
        private UIStartWindow mUIStartWindow;
        
        private UIAutoImport5010TitleBar mUIAutoImport5010TitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIStartWindow : WinWindow
    {
        
        public UIStartWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btn_Start";
            this.WindowTitles.Add("AutoImport5010");
            #endregion
        }
        
        #region Properties
        public WinButton UIStartButton
        {
            get
            {
                if ((this.mUIStartButton == null))
                {
                    this.mUIStartButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIStartButton.SearchProperties[WinButton.PropertyNames.Name] = "Start";
                    this.mUIStartButton.WindowTitles.Add("AutoImport5010");
                    #endregion
                }
                return this.mUIStartButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIStartButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIAutoImport5010TitleBar : WinTitleBar
    {
        
        public UIAutoImport5010TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("AutoImport5010");
            #endregion
        }
        
        #region Properties
        public WinButton AutoImportCloseButton
        {
            get
            {
                if ((this.mAutoImportCloseButton == null))
                {
                    this.mAutoImportCloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mAutoImportCloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mAutoImportCloseButton.WindowTitles.Add("AutoImport5010");
                    #endregion
                }
                return this.mAutoImportCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mAutoImportCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIApexWatcherWindow : WinWindow
    {
        
        public UIApexWatcherWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "ApexWatcher";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("ApexWatcher");
            #endregion
        }
        
        #region Properties
        public UIStoppedWindow UIStoppedWindow
        {
            get
            {
                if ((this.mUIStoppedWindow == null))
                {
                    this.mUIStoppedWindow = new UIStoppedWindow(this);
                }
                return this.mUIStoppedWindow;
            }
        }
        
        public UIStoppedWindow1 UIStoppedWindow1
        {
            get
            {
                if ((this.mUIStoppedWindow1 == null))
                {
                    this.mUIStoppedWindow1 = new UIStoppedWindow1(this);
                }
                return this.mUIStoppedWindow1;
            }
        }
        
        public UIStoppedWindow2 UIStoppedWindow2
        {
            get
            {
                if ((this.mUIStoppedWindow2 == null))
                {
                    this.mUIStoppedWindow2 = new UIStoppedWindow2(this);
                }
                return this.mUIStoppedWindow2;
            }
        }
        
        public UIApexWatcherTitleBar UIApexWatcherTitleBar
        {
            get
            {
                if ((this.mUIApexWatcherTitleBar == null))
                {
                    this.mUIApexWatcherTitleBar = new UIApexWatcherTitleBar(this);
                }
                return this.mUIApexWatcherTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIStoppedWindow mUIStoppedWindow;
        
        private UIStoppedWindow1 mUIStoppedWindow1;
        
        private UIStoppedWindow2 mUIStoppedWindow2;
        
        private UIApexWatcherTitleBar mUIApexWatcherTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIStoppedWindow : WinWindow
    {
        
        public UIStoppedWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnStartStopImportMonitor";
            this.WindowTitles.Add("ApexWatcher");
            #endregion
        }
        
        #region Properties
        public WinButton UIImportMonitor
        {
            get
            {
                if ((this.mUIImportMonitor == null))
                {
                    this.mUIImportMonitor = new WinButton(this);
                    #region Search Criteria
                    this.mUIImportMonitor.SearchProperties[WinButton.PropertyNames.Name] = "Stopped";
                    this.mUIImportMonitor.WindowTitles.Add("ApexWatcher");
                    #endregion
                }
                return this.mUIImportMonitor;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIImportMonitor;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIStoppedWindow1 : WinWindow
    {
        
        public UIStoppedWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnStartStopValidator";
            this.WindowTitles.Add("ApexWatcher");
            #endregion
        }
        
        #region Properties
        public WinButton UIValidator
        {
            get
            {
                if ((this.mUIValidator == null))
                {
                    this.mUIValidator = new WinButton(this);
                    #region Search Criteria
                    this.mUIValidator.SearchProperties[WinButton.PropertyNames.Name] = "Stopped";
                    this.mUIValidator.WindowTitles.Add("ApexWatcher");
                    #endregion
                }
                return this.mUIValidator;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIValidator;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIStoppedWindow2 : WinWindow
    {
        
        public UIStoppedWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnStartStopValidator5010";
            this.WindowTitles.Add("ApexWatcher");
            #endregion
        }
        
        #region Properties
        public WinButton UI5010Validator
        {
            get
            {
                if ((this.mUI5010Validator == null))
                {
                    this.mUI5010Validator = new WinButton(this);
                    #region Search Criteria
                    this.mUI5010Validator.SearchProperties[WinButton.PropertyNames.Name] = "Stopped";
                    this.mUI5010Validator.WindowTitles.Add("ApexWatcher");
                    #endregion
                }
                return this.mUI5010Validator;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI5010Validator;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIApexWatcherTitleBar : WinTitleBar
    {
        
        public UIApexWatcherTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("ApexWatcher");
            #endregion
        }
        
        #region Properties
        public WinButton ApexWatcherCloseButton
        {
            get
            {
                if ((this.mApexWatcherCloseButton == null))
                {
                    this.mApexWatcherCloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mApexWatcherCloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mApexWatcherCloseButton.WindowTitles.Add("ApexWatcher");
                    #endregion
                }
                return this.mApexWatcherCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mApexWatcherCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKProblemConnectingButton
        {
            get
            {
                if ((this.mUIOKProblemConnectingButton == null))
                {
                    this.mUIOKProblemConnectingButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKProblemConnectingButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKProblemConnectingButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKProblemConnectingButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKProblemConnectingButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIClaimStakerSQLServerWindow : WinWindow
    {
        
        public UIClaimStakerSQLServerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "ClaimStaker SQL Server Login";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("ClaimStaker SQL Server Login");
            #endregion
        }
        
        #region Properties
        public UITxtLoginNameWindow UITxtLoginNameWindow
        {
            get
            {
                if ((this.mUITxtLoginNameWindow == null))
                {
                    this.mUITxtLoginNameWindow = new UITxtLoginNameWindow(this);
                }
                return this.mUITxtLoginNameWindow;
            }
        }
        
        public UITxtPasswordWindow UITxtPasswordWindow
        {
            get
            {
                if ((this.mUITxtPasswordWindow == null))
                {
                    this.mUITxtPasswordWindow = new UITxtPasswordWindow(this);
                }
                return this.mUITxtPasswordWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITxtLoginNameWindow mUITxtLoginNameWindow;
        
        private UITxtPasswordWindow mUITxtPasswordWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UITxtLoginNameWindow : WinWindow
    {
        
        public UITxtLoginNameWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtLoginName";
            this.WindowTitles.Add("ClaimStaker SQL Server Login");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtLoginNameEdit
        {
            get
            {
                if ((this.mUITxtLoginNameEdit == null))
                {
                    this.mUITxtLoginNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtLoginNameEdit.WindowTitles.Add("ClaimStaker SQL Server Login");
                    #endregion
                }
                return this.mUITxtLoginNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtLoginNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UITxtPasswordWindow : WinWindow
    {
        
        public UITxtPasswordWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtPassword";
            this.WindowTitles.Add("ClaimStaker SQL Server Login");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtPasswordEdit
        {
            get
            {
                if ((this.mUITxtPasswordEdit == null))
                {
                    this.mUITxtPasswordEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtPasswordEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Login Name:";
                    this.mUITxtPasswordEdit.WindowTitles.Add("ClaimStaker SQL Server Login");
                    #endregion
                }
                return this.mUITxtPasswordEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtPasswordEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIClaimStakerPlusWindow : WinWindow
    {
        
        public UIClaimStakerPlusWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "ClaimStaker Plus";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("ClaimStaker Plus");
            #endregion
        }
        
        #region Properties
        public UIClaimStakerMainMenuBar UIClaimStakerMainMenuBar
        {
            get
            {
                if ((this.mUIClaimStakerMainMenuBar == null))
                {
                    this.mUIClaimStakerMainMenuBar = new UIClaimStakerMainMenuBar(this);
                }
                return this.mUIClaimStakerMainMenuBar;
            }
        }
        
        public UICreateOutputWindow UICreateOutputWindow
        {
            get
            {
                if ((this.mUICreateOutputWindow == null))
                {
                    this.mUICreateOutputWindow = new UICreateOutputWindow(this);
                }
                return this.mUICreateOutputWindow;
            }
        }
        
        public UIClaimStakerPlusTitleBar UIClaimStakerPlusTitleBar
        {
            get
            {
                if ((this.mUIClaimStakerPlusTitleBar == null))
                {
                    this.mUIClaimStakerPlusTitleBar = new UIClaimStakerPlusTitleBar(this);
                }
                return this.mUIClaimStakerPlusTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIClaimStakerMainMenuBar mUIClaimStakerMainMenuBar;
        
        private UICreateOutputWindow mUICreateOutputWindow;
        
        private UIClaimStakerPlusTitleBar mUIClaimStakerPlusTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIClaimStakerMainMenuBar : WinMenuBar
    {
        
        public UIClaimStakerMainMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
            this.WindowTitles.Add("ClaimStaker Plus");
            #endregion
        }
        
        #region Properties
        public UIOutputMenuItem UIOutputMenuItem
        {
            get
            {
                if ((this.mUIOutputMenuItem == null))
                {
                    this.mUIOutputMenuItem = new UIOutputMenuItem(this);
                }
                return this.mUIOutputMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIOutputMenuItem mUIOutputMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOutputMenuItem : WinMenuItem
    {
        
        public UIOutputMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Output";
            this.WindowTitles.Add("ClaimStaker Plus");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICreateMenuItem
        {
            get
            {
                if ((this.mUICreateMenuItem == null))
                {
                    this.mUICreateMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICreateMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Create";
                    this.mUICreateMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICreateMenuItem.WindowTitles.Add("ClaimStaker Plus");
                    #endregion
                }
                return this.mUICreateMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICreateMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UICreateOutputWindow : WinWindow
    {
        
        public UICreateOutputWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "OutputCreate";
            this.WindowTitles.Add("ClaimStaker Plus");
            #endregion
        }
        
        #region Properties
        public UIClaimIDWindow UIClaimIDWindow
        {
            get
            {
                if ((this.mUIClaimIDWindow == null))
                {
                    this.mUIClaimIDWindow = new UIClaimIDWindow(this);
                }
                return this.mUIClaimIDWindow;
            }
        }
        
        public UITestWindow UITestWindow
        {
            get
            {
                if ((this.mUITestWindow == null))
                {
                    this.mUITestWindow = new UITestWindow(this);
                }
                return this.mUITestWindow;
            }
        }
        
        public UITxtClaimIDWindow UITxtClaimIDWindow
        {
            get
            {
                if ((this.mUITxtClaimIDWindow == null))
                {
                    this.mUITxtClaimIDWindow = new UITxtClaimIDWindow(this);
                }
                return this.mUITxtClaimIDWindow;
            }
        }
        
        public UICreateWindow UICreateWindow
        {
            get
            {
                if ((this.mUICreateWindow == null))
                {
                    this.mUICreateWindow = new UICreateWindow(this);
                }
                return this.mUICreateWindow;
            }
        }
        
        public UIDentalWindow UIDentalWindow
        {
            get
            {
                if ((this.mUIDentalWindow == null))
                {
                    this.mUIDentalWindow = new UIDentalWindow(this);
                }
                return this.mUIDentalWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIClaimIDWindow mUIClaimIDWindow;
        
        private UITestWindow mUITestWindow;
        
        private UITxtClaimIDWindow mUITxtClaimIDWindow;
        
        private UICreateWindow mUICreateWindow;
        
        private UIDentalWindow mUIDentalWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIClaimIDWindow : WinWindow
    {
        
        public UIClaimIDWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rdoClaim";
            this.WindowTitles.Add("ClaimStaker Plus");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIClaimIDRadioButton
        {
            get
            {
                if ((this.mUIClaimIDRadioButton == null))
                {
                    this.mUIClaimIDRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIClaimIDRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Claim ID:";
                    this.mUIClaimIDRadioButton.WindowTitles.Add("ClaimStaker Plus");
                    #endregion
                }
                return this.mUIClaimIDRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIClaimIDRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UITestWindow : WinWindow
    {
        
        public UITestWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rdoOutputFormatTest";
            this.WindowTitles.Add("ClaimStaker Plus");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UITestRadioButton
        {
            get
            {
                if ((this.mUITestRadioButton == null))
                {
                    this.mUITestRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUITestRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Test";
                    this.mUITestRadioButton.WindowTitles.Add("ClaimStaker Plus");
                    #endregion
                }
                return this.mUITestRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUITestRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UITxtClaimIDWindow : WinWindow
    {
        
        public UITxtClaimIDWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtClaimID";
            this.WindowTitles.Add("ClaimStaker Plus");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtClaimIDEdit
        {
            get
            {
                if ((this.mUITxtClaimIDEdit == null))
                {
                    this.mUITxtClaimIDEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtClaimIDEdit.WindowTitles.Add("ClaimStaker Plus");
                    #endregion
                }
                return this.mUITxtClaimIDEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtClaimIDEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UICreateWindow : WinWindow
    {
        
        public UICreateWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Create";
            this.WindowTitles.Add("ClaimStaker Plus");
            #endregion
        }
        
        #region Properties
        public WinButton UICreateButton
        {
            get
            {
                if ((this.mUICreateButton == null))
                {
                    this.mUICreateButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICreateButton.SearchProperties[WinButton.PropertyNames.Name] = "Create";
                    this.mUICreateButton.WindowTitles.Add("ClaimStaker Plus");
                    #endregion
                }
                return this.mUICreateButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICreateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIDentalWindow : WinWindow
    {
        
        public UIDentalWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rdoDent";
            this.WindowTitles.Add("ClaimStaker Plus");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIDentalRadioButton
        {
            get
            {
                if ((this.mUIDentalRadioButton == null))
                {
                    this.mUIDentalRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIDentalRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Dental";
                    this.mUIDentalRadioButton.WindowTitles.Add("ClaimStaker Plus");
                    #endregion
                }
                return this.mUIDentalRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIDentalRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIClaimStakerPlusTitleBar : WinTitleBar
    {
        
        public UIClaimStakerPlusTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("ClaimStaker Plus");
            #endregion
        }
        
        #region Properties
        public WinButton ClaimStakerPlusCloseButton
        {
            get
            {
                if ((this.mClaimStakerPlusCloseButton == null))
                {
                    this.mClaimStakerPlusCloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mClaimStakerPlusCloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mClaimStakerPlusCloseButton.WindowTitles.Add("ClaimStaker Plus");
                    #endregion
                }
                return this.mClaimStakerPlusCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mClaimStakerPlusCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIClaimStakerAUTOIMPORWindow : WinWindow
    {
        
        public UIClaimStakerAUTOIMPORWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "ClaimStaker                     ==>>  AUTO-IMPORT VERSION  <<==";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6MDIForm";
            this.WindowTitles.Add("ClaimStaker                     ==>>  AUTO-IMPORT VERSION  <<==");
            #endregion
        }
        
        #region Properties
        public UIClaimStakerAUTOIMPORTitleBar UIClaimStakerAUTOIMPORTitleBar
        {
            get
            {
                if ((this.mUIClaimStakerAUTOIMPORTitleBar == null))
                {
                    this.mUIClaimStakerAUTOIMPORTitleBar = new UIClaimStakerAUTOIMPORTitleBar(this);
                }
                return this.mUIClaimStakerAUTOIMPORTitleBar;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIClaimStakerAUTOIMPORTitleBar mUIClaimStakerAUTOIMPORTitleBar;
        
        private UIItemWindow mUIItemWindow;
        
        private UICancelWindow mUICancelWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIClaimStakerAUTOIMPORTitleBar : WinTitleBar
    {
        
        public UIClaimStakerAUTOIMPORTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("ClaimStaker                     ==>>  AUTO-IMPORT VERSION  <<==");
            #endregion
        }
        
        #region Properties
        public WinButton AutoImportCloseButton
        {
            get
            {
                if ((this.mAutoImportCloseButton == null))
                {
                    this.mAutoImportCloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mAutoImportCloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mAutoImportCloseButton.WindowTitles.Add("ClaimStaker                     ==>>  AUTO-IMPORT VERSION  <<==");
                    #endregion
                }
                return this.mAutoImportCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mAutoImportCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "3244";
            this.WindowTitles.Add("ClaimStaker                     ==>>  AUTO-IMPORT VERSION  <<==");
            #endregion
        }
        
        #region Properties
        public WinClient AutoImportRedScreenWindow
        {
            get
            {
                if ((this.mAutoImportRedScreenWindow == null))
                {
                    this.mAutoImportRedScreenWindow = new WinClient(this);
                    #region Search Criteria
                    this.mAutoImportRedScreenWindow.SearchProperties[WinControl.PropertyNames.Name] = "Workspace";
                    this.mAutoImportRedScreenWindow.WindowTitles.Add("ClaimStaker                     ==>>  AUTO-IMPORT VERSION  <<==");
                    #endregion
                }
                return this.mAutoImportRedScreenWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mAutoImportRedScreenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("ClaimStaker                     ==>>  AUTO-IMPORT VERSION  <<==");
            #endregion
        }
        
        #region Properties
        public WinButton AutoImportInActionCancelButton
        {
            get
            {
                if ((this.mAutoImportInActionCancelButton == null))
                {
                    this.mAutoImportInActionCancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mAutoImportInActionCancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mAutoImportInActionCancelButton.WindowTitles.Add("ClaimStaker                     ==>>  AUTO-IMPORT VERSION  <<==");
                    #endregion
                }
                return this.mAutoImportInActionCancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mAutoImportInActionCancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("ClaimStaker                     ==>>  AUTO-IMPORT VERSION  <<==");
            #endregion
        }
        
        #region Properties
        public WinClient UIClaimStakerAUTOIMPORClient
        {
            get
            {
                if ((this.mUIClaimStakerAUTOIMPORClient == null))
                {
                    this.mUIClaimStakerAUTOIMPORClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIClaimStakerAUTOIMPORClient.WindowTitles.Add("ClaimStaker                     ==>>  AUTO-IMPORT VERSION  <<==");
                    #endregion
                }
                return this.mUIClaimStakerAUTOIMPORClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIClaimStakerAUTOIMPORClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIWarningWindow : WinWindow
    {
        
        public UIWarningWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "                                                      >> Warning <<";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("                                                      >> Warning <<");
            #endregion
        }
        
        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("                                                      >> Warning <<");
            #endregion
        }
        
        #region Properties
        public WinButton AutoImportPopUpWindowYesButton
        {
            get
            {
                if ((this.mAutoImportPopUpWindowYesButton == null))
                {
                    this.mAutoImportPopUpWindowYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mAutoImportPopUpWindowYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mAutoImportPopUpWindowYesButton.WindowTitles.Add("                                                      >> Warning <<");
                    #endregion
                }
                return this.mAutoImportPopUpWindowYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mAutoImportPopUpWindowYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIConfirmCloseWindow : WinWindow
    {
        
        public UIConfirmCloseWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Close";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Close");
            #endregion
        }
        
        #region Properties
        public UIYesWindow1 UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow1(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow1 mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIYesWindow1 : WinWindow
    {
        
        public UIYesWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Confirm Close");
            #endregion
        }
        
        #region Properties
        public WinButton ConfirmCloseAutoImportYesButton
        {
            get
            {
                if ((this.mConfirmCloseAutoImportYesButton == null))
                {
                    this.mConfirmCloseAutoImportYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mConfirmCloseAutoImportYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mConfirmCloseAutoImportYesButton.WindowTitles.Add("Confirm Close");
                    #endregion
                }
                return this.mConfirmCloseAutoImportYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mConfirmCloseAutoImportYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public WinWindow OutputSuccessWindow
        {
            get
            {
                if ((this.mOutputSuccessWindow == null))
                {
                    this.mOutputSuccessWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mOutputSuccessWindow.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
                    #endregion
                }
                return this.mOutputSuccessWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mOutputSuccessWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIClaimStakerPlusValidWindow : WinWindow
    {
        
        public UIClaimStakerPlusValidWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "ClaimStaker Plus - [ValidateClaims]";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("ClaimStaker Plus - [ValidateClaims]");
            #endregion
        }
        
        #region Properties
        public UIClaimStakerPlusValidTitleBar UIClaimStakerPlusValidTitleBar
        {
            get
            {
                if ((this.mUIClaimStakerPlusValidTitleBar == null))
                {
                    this.mUIClaimStakerPlusValidTitleBar = new UIClaimStakerPlusValidTitleBar(this);
                }
                return this.mUIClaimStakerPlusValidTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIClaimStakerPlusValidTitleBar mUIClaimStakerPlusValidTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIClaimStakerPlusValidTitleBar : WinTitleBar
    {
        
        public UIClaimStakerPlusValidTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("ClaimStaker Plus - [ValidateClaims]");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("ClaimStaker Plus - [ValidateClaims]");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIApexOneTouchWindow : WinWindow
    {
        
        public UIApexOneTouchWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Apex OneTouch";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Apex OneTouch");
            #endregion
        }
        
        #region Properties
        public UIBtnConfigureWindow UIBtnConfigureWindow
        {
            get
            {
                if ((this.mUIBtnConfigureWindow == null))
                {
                    this.mUIBtnConfigureWindow = new UIBtnConfigureWindow(this);
                }
                return this.mUIBtnConfigureWindow;
            }
        }
        
        public UIBtnSendClaimsWindow UIBtnSendClaimsWindow
        {
            get
            {
                if ((this.mUIBtnSendClaimsWindow == null))
                {
                    this.mUIBtnSendClaimsWindow = new UIBtnSendClaimsWindow(this);
                }
                return this.mUIBtnSendClaimsWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIBtnConfigureWindow mUIBtnConfigureWindow;
        
        private UIBtnSendClaimsWindow mUIBtnSendClaimsWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIBtnConfigureWindow : WinWindow
    {
        
        public UIBtnConfigureWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnConfigure";
            this.WindowTitles.Add("Apex OneTouch");
            #endregion
        }
        
        #region Properties
        public WinButton UIBtnConfigureButton
        {
            get
            {
                if ((this.mUIBtnConfigureButton == null))
                {
                    this.mUIBtnConfigureButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIBtnConfigureButton.WindowTitles.Add("Apex OneTouch");
                    #endregion
                }
                return this.mUIBtnConfigureButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIBtnConfigureButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIBtnSendClaimsWindow : WinWindow
    {
        
        public UIBtnSendClaimsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSendClaims";
            this.WindowTitles.Add("Apex OneTouch");
            #endregion
        }
        
        #region Properties
        public WinButton UIBtnSendClaimsButton
        {
            get
            {
                if ((this.mUIBtnSendClaimsButton == null))
                {
                    this.mUIBtnSendClaimsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIBtnSendClaimsButton.WindowTitles.Add("Apex OneTouch");
                    #endregion
                }
                return this.mUIBtnSendClaimsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIBtnSendClaimsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIApexOneTouchConfigurWindow : WinWindow
    {
        
        public UIApexOneTouchConfigurWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Apex OneTouch Configuration";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Apex OneTouch Configuration");
            #endregion
        }
        
        #region Properties
        public UIPnlTabStatementsWindow UIPnlTabStatementsWindow
        {
            get
            {
                if ((this.mUIPnlTabStatementsWindow == null))
                {
                    this.mUIPnlTabStatementsWindow = new UIPnlTabStatementsWindow(this);
                }
                return this.mUIPnlTabStatementsWindow;
            }
        }
        
        public UIPnlTabAccountsWindow UIPnlTabAccountsWindow
        {
            get
            {
                if ((this.mUIPnlTabAccountsWindow == null))
                {
                    this.mUIPnlTabAccountsWindow = new UIPnlTabAccountsWindow(this);
                }
                return this.mUIPnlTabAccountsWindow;
            }
        }
        
        public UIPnlTabAdvancedWindow UIPnlTabAdvancedWindow
        {
            get
            {
                if ((this.mUIPnlTabAdvancedWindow == null))
                {
                    this.mUIPnlTabAdvancedWindow = new UIPnlTabAdvancedWindow(this);
                }
                return this.mUIPnlTabAdvancedWindow;
            }
        }
        
        public UIPnlTabClaimsWindow UIPnlTabClaimsWindow
        {
            get
            {
                if ((this.mUIPnlTabClaimsWindow == null))
                {
                    this.mUIPnlTabClaimsWindow = new UIPnlTabClaimsWindow(this);
                }
                return this.mUIPnlTabClaimsWindow;
            }
        }
        
        public UIBtnSaveWindow UIBtnSaveWindow
        {
            get
            {
                if ((this.mUIBtnSaveWindow == null))
                {
                    this.mUIBtnSaveWindow = new UIBtnSaveWindow(this);
                }
                return this.mUIBtnSaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPnlTabStatementsWindow mUIPnlTabStatementsWindow;
        
        private UIPnlTabAccountsWindow mUIPnlTabAccountsWindow;
        
        private UIPnlTabAdvancedWindow mUIPnlTabAdvancedWindow;
        
        private UIPnlTabClaimsWindow mUIPnlTabClaimsWindow;
        
        private UIBtnSaveWindow mUIBtnSaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIPnlTabStatementsWindow : WinWindow
    {
        
        public UIPnlTabStatementsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "pnlTabStatements";
            this.WindowTitles.Add("Apex OneTouch Configuration");
            #endregion
        }
        
        #region Properties
        public WinClient UIPnlTabStatementsClient
        {
            get
            {
                if ((this.mUIPnlTabStatementsClient == null))
                {
                    this.mUIPnlTabStatementsClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIPnlTabStatementsClient.WindowTitles.Add("Apex OneTouch Configuration");
                    #endregion
                }
                return this.mUIPnlTabStatementsClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIPnlTabStatementsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIPnlTabAccountsWindow : WinWindow
    {
        
        public UIPnlTabAccountsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "pnlTabAccounts";
            this.WindowTitles.Add("Apex OneTouch Configuration");
            #endregion
        }
        
        #region Properties
        public WinClient UIPnlTabAccountsClient
        {
            get
            {
                if ((this.mUIPnlTabAccountsClient == null))
                {
                    this.mUIPnlTabAccountsClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIPnlTabAccountsClient.WindowTitles.Add("Apex OneTouch Configuration");
                    #endregion
                }
                return this.mUIPnlTabAccountsClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIPnlTabAccountsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIPnlTabAdvancedWindow : WinWindow
    {
        
        public UIPnlTabAdvancedWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "pnlTabAdvanced";
            this.WindowTitles.Add("Apex OneTouch Configuration");
            #endregion
        }
        
        #region Properties
        public WinClient UIPnlTabAdvancedClient
        {
            get
            {
                if ((this.mUIPnlTabAdvancedClient == null))
                {
                    this.mUIPnlTabAdvancedClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIPnlTabAdvancedClient.WindowTitles.Add("Apex OneTouch Configuration");
                    #endregion
                }
                return this.mUIPnlTabAdvancedClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIPnlTabAdvancedClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIPnlTabClaimsWindow : WinWindow
    {
        
        public UIPnlTabClaimsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "pnlTabClaims";
            this.WindowTitles.Add("Apex OneTouch Configuration");
            #endregion
        }
        
        #region Properties
        public WinClient UIPnlTabClaimsClient
        {
            get
            {
                if ((this.mUIPnlTabClaimsClient == null))
                {
                    this.mUIPnlTabClaimsClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIPnlTabClaimsClient.WindowTitles.Add("Apex OneTouch Configuration");
                    #endregion
                }
                return this.mUIPnlTabClaimsClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIPnlTabClaimsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIBtnSaveWindow : WinWindow
    {
        
        public UIBtnSaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSave";
            this.WindowTitles.Add("Apex OneTouch Configuration");
            #endregion
        }
        
        #region Properties
        public WinButton UIBtnSaveButton
        {
            get
            {
                if ((this.mUIBtnSaveButton == null))
                {
                    this.mUIBtnSaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIBtnSaveButton.WindowTitles.Add("Apex OneTouch Configuration");
                    #endregion
                }
                return this.mUIBtnSaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIBtnSaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UIApexOneTouchListItem
        {
            get
            {
                if ((this.mUIApexOneTouchListItem == null))
                {
                    this.mUIApexOneTouchListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIApexOneTouchListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Apex OneTouch";
                    this.mUIApexOneTouchListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUIApexOneTouchListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIApexOneTouchListItem;
        #endregion
    }
}
